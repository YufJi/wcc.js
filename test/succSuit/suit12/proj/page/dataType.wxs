// https://developers.weixin.qq.com/miniprogram/dev/reference/wxs/06datatype.html
// 数据类型

//number
var a = 10;
var PI = 3.141592653589793;

console.log(a.varructor);

console.log(this.a);

var o = {} //生成一个新的空对象

//生成一个新的非空对象
o = {
  'string': 1, //object 的 key 可以是字符串
  var_var: 2, //object 的 key 也可以是符合变量定义规则的标识符
  func: {}, //object 的 value 可以是任何类型
};

//对象属性的读操作
console.log(1 === o['string']);
console.log(2 === o.var_var);

//对象属性的写操作
o['string']++;
o['string'] += 10;
o.var_var++;
o.var_var += 10;

//对象属性的读操作
console.log(12 === o['string']);
console.log(13 === o.var_var);

console.log("Object" === {
  k: "1",
  v: "2"
}.varructor)

//方法 1
function a(x) {
  return x;
}

//方法 2
var b = function (x) {
  return x;
}
b();

var a = function (x) {
  return function () {
    return x;
  }
}

var b = a(100);
(100 === b());

var a = function () {
  console.log(3 === arguments.length);
  console.log(100 === arguments[0]);
  console.log(200 === arguments[1]);
  console.log(300 === arguments[2]);
};
a(100, 200, 300);

delete a.b;


var a = null;
console.log(a);
var a = void null;
console.log(a);
var a = typeof null;
console.log(a);
var a = undefined;
console.log(a);
var a = NaN;
console.log(a);
var a = Infinity;
console.log(a);


function test(x) {
  var a = arguments[0];
  console.log(this);
  console.log(this.a);
  console.log(arguments);
  console.log(arguments[0])
  console.log(JSON.stringify(x))
}
test('12121212');
console.log(this);
console.log(this.a);

v = 10;

a = this.a;
a = 10;
console.log(a.toString());
// number
var a = 10;
console.log(a.varructor);
console.log(a.toString());
console.log(a.toLocaleString());
console.log(a.valueOf());
console.log(a.toFixed());
console.log(a.toExponential());
console.log(a.toPrecision());

//string
var a = 'hello world';
var b = "hello world";

console.log(a.varructor)
console.log(a.length)
console.log(b.varructor)
console.log(b.length)

console.log(a.toString());
console.log(a.valueOf());
console.log(a.charAt(1));
console.log(a.charCodeAt(1));
console.log(a.concat('1'));
console.log(a.indexOf(0));
console.log(a.lastIndexOf('h'));
console.log(a.localeCompare());
console.log(a.match(getRegExp('i', "img")));
console.log(a.replace('h', 'i'));
console.log(a.search(getRegExp('i', "img")));
console.log(a.slice(0))
console.log(a.split('s'))
console.log(a.substring(0))
console.log(a.toLowerCase())
console.log(a.toLocaleLowerCase())
console.log(a.toUpperCase())
console.log(a.toLocaleUpperCase())
console.log(a.trim())

//boolean

var a = true;
var b = false;
console.log(a.varructor)
console.log(b.varructor)

console.log(a.toString());
console.log(a.valueOf());
console.log(b.toString());
console.log(b.toString());

//object

var o = {} //生成一个新的空对象

//生成一个新的非空对象
o = {
  'string': 1, //object 的 key 可以是字符串
  var_var: 2, //object 的 key 也可以是符合变量定义规则的标识符
  func: {}, //object 的 value 可以是任何类型
};

//对象属性的读操作
console.log(1 === o['string']);
console.log(2 === o.var_var);

//对象属性的写操作
o['string']++;
o['string'] += 10;
o.var_var++;
o.var_var += 10;

//对象属性的读操作
console.log(12 === o['string']);
console.log(13 === o.var_var);

console.log("Object" === {
  k: "1",
  v: "2"
}.varructor)

console.log(o.toString());

//function
//方法 1
function a(x) {
  return x;
}

//方法 2
var b = function (x) {
  console.log(arguments['x']);
  console.log(arguments.x);
  return x;
}

var a = function (x, y, z) {
  return function () {
    return x;
  }
}

var b = a(100);
console.log(100 === b());

console.log(a.varructor);
console.log(a.length);
console.log(a.toString());
console.log(b.varructor);
console.log(b.length);
console.log(b.toString());

var func = function (a, b, c) {}

console.log("Function" === func.varructor);
console.log(3 === func.length);
console.log("[function Function]" === func.toString());


//array
var a = []; //生成一个新的空数组

a = [1, "2", {}, (function () {})]; //生成一个新的非空数组，数组元素可以是任何类型

console.log(a.varructor);
console.log(a.length);

console.log(a.toString());
//console.log(a.concat([1, 2, 3])); // TODO 这个样例过不了，很神奇，函数需要被()包着？
console.log(a.join('|'));
// console.log(a.pop());
console.log(a.push('.'));
// console.log(a.reverse('.'));
console.log(a.shift('.'));
// console.log(a.slice(2, 4));
// console.log(a.sort());
console.log(a.splice(1, 0, 'Feb'));
console.log(a.unshift());
console.log(a.indexOf('.'));
console.log(a.lastIndexOf('.'));

function isBelowThreshold(currentValue) {
  return currentValue < 40;
}

var array1 = [1, 30, 39, 29, 10, 13];

console.log(array1.every(isBelowThreshold));

var array = [1, 2, 3, 4, 5];

var even = function (element) {
  // checks whether an element is even
  return element % 2 === 0;
};

console.log(array.some(even));

var array1 = ['a', 'b', 'c'];

array1.forEach(function (element) {
  console.log(element);
});

var array1 = [1, 4, 9, 16];

// pass a function to map
var map1 = array1.map(function (x) {
  return x * 2;
});

console.log(map1);

var words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];

var result = words.filter(function (word) {
  return word.length > 6;
});

console.log(result);

var array1 = [1, 2, 3, 4];
var reducer = function (accumulator, currentValue) {
  return accumulator + currentValue;
};

// 1 + 2 + 3 + 4
console.log(array1.reduce(reducer));
// expected output: 10

// 5 + 1 + 2 + 3 + 4
console.log(array1.reduce(reducer, 5));

var array1 = [
  [0, 1],
  [2, 3],
  [4, 5]
].reduceRight(
  function (accumulator, currentValue) {
    return accumulator.concat(currentValue);
  }
);

console.log(array1);


//date

var date = getDate(); //返回当前时间对象

date = getDate(1500000000000);

console.log(date);
// Fri Jul 14 2017 10:40:00 GMT+0800 (中国标准时间)
date = getDate('2017-7-14');
console.log(date);
// Fri Jul 14 2017 00:00:00 GMT+0800 (中国标准时间)
date = getDate(2017, 6, 14, 10, 40, 0, 0);
// Fri Jul 14 2017 10:40:00 GMT+0800 (中国标准时间)
console.log(date);

console.log(date.constructor);

console.log(date.toString())
console.log(date.toDateString())
console.log(date.toTimeString())
console.log(date.toLocaleString())
console.log(date.toLocaleDateString())
console.log(date.toLocaleTimeString())
console.log(date.valueOf())
console.log(date.getTime())
console.log(date.getFullYear())
console.log(date.getUTCFullYear())
console.log(date.getMonth())
console.log(date.getUTCMonth())
console.log(date.getDate())
console.log(date.getUTCDate())
console.log(date.getDay())
console.log(date.getUTCDay())
console.log(date.getHours())
console.log(date.getUTCHours())
console.log(date.getMinutes())
console.log(date.getUTCMinutes())
console.log(date.getSeconds())
console.log(date.getUTCSeconds())
console.log(date.getMilliseconds())
console.log(date.getUTCMilliseconds())
console.log(date.getTimezoneOffset())
date.setTime();
date.setMilliseconds();
date.setUTCMilliseconds();
date.setSeconds();
date.setUTCSeconds();
date.setMinutes();
date.setUTCMinutes();
date.setHours();
date.setUTCHours();
date.setDate();
date.setUTCDate();
date.setMonth();
date.setUTCMonth();
date.setFullYear();
date.setUTCFullYear();
console.log(getDate(12).toUTCString())
console.log(getDate(12).toISOString())
console.log(getDate(12).toJSON())

//regexp
var a = getRegExp("x", "img");
console.log(a.constructor)
console.log("x" === a.source);
console.log(true === a.global);
console.log(true === a.ignoreCase);
console.log(true === a.multiline);
console.log(a.lastIndex);
console.log(a.exec('xxxxxx'));
console.log(a.test('xxxxxx'));
console.log(a.toString());

//数据类型判断
//constructor 属性
var number = 10;
console.log("Number" === number.constructor);

var string = "str";
console.log("String" === string.constructor);

var boolean = true;
console.log("Boolean" === boolean.constructor);

var object = {};
console.log("Object" === object.constructor);

var func = function () {};
console.log("Function" === func.constructor);

var array = [];
console.log("Array" === array.constructor);

var date = getDate();
console.log("Date" === date.constructor);

var regexp = getRegExp();
console.log("RegExp" === regexp.constructor);

//typeof

var number = 10;
var boolean = true;
var object = {};
var func = function () {};
var array = [];
var date = getDate();
var regexp = getRegExp();

console.log('number' === typeof number);
console.log('boolean' === typeof boolean);
console.log('object' === typeof object);
console.log('function' === typeof func);
console.log('object' === typeof array);
console.log('object' === typeof date);
console.log('object' === typeof regexp);

console.log('undefined' === typeof undefined);
console.log('object' === typeof null);